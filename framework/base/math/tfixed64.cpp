////////////////////////////////////////////////////////////////////////////////
//  tfixed64.h
//
//  Math 64-bit fixed data type class with 16-bit fracture
//
//
////////////////////////////////////////////////////////////////////////////////

#include "tfixed64.h"


////////////////////////////////////////////////////////////////////////////////
// Constructors
////////////////////////////////////////////////////////////////////////////////
tfixed64::tfixed64():value(0){}
////////////////////////////////////////////////////////////////////////////////
tfixed64::tfixed64(const tfixed64 & fx_val):value(fx_val.value){}
////////////////////////////////////////////////////////////////////////////////
tfixed64::tfixed64(const float f_val)
{
    value = (int64t)(f_val * (float)one);
}
////////////////////////////////////////////////////////////////////////////////
tfixed64::tfixed64(const double d_val)
{
    value = (int64t)(d_val * (double)one);
}
////////////////////////////////////////////////////////////////////////////////
tfixed64::tfixed64(const int64t i_val)
{
    value = i_val << bits;
}

////////////////////////////////////////////////////////////////////////////////
//Cast To Pointer int64t *
tfixed64::operator int64t* () const
{
    return (int64t*) this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64::operator const int64t* () const
{
    return (const int64t*) this;
}

////////////////////////////////////////////////////////////////////////////////
//Cast To Primitive Build-in Types
////////////////////////////////////////////////////////////////////////////////
tfixed64::operator float() const
{
    return (float)value / (float)one;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64::operator double() const
{
    return (double)value / (double)one;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64::operator int64t() const
{
    return value >> bits;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64::operator bool() const
{
    return value != 0;
}

////////////////////////////////////////////////////////////////////////////////
// Assignment Operators
////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator = (const tfixed64 & fx_val)
{
    value = fx_val.value;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator += (const tfixed64 & fx_val)
{
    value += fx_val.value;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator -= (const tfixed64& fx_val)
{
    value -= fx_val.value;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator *= (const tfixed64 & fx_val)
{
    //v = (long)(((long long)v * (long long)f.v + half) >> bits);
    value = ((value * fx_val.value + half) >> bits);
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator /= (const tfixed64 & fx_val)
{
    //v = (long)(((long long)v << bits) / (long long)f.v);
    value = ((value << bits) / fx_val.value);
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator >>= (int64t i)
{
    value >>= i;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator <<= (int64t i)
{
    value <<= i;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator &= (int64t mask)
{
    value &= mask;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator |= (int64t mask)
{
    value |= mask;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 & tfixed64::operator ^= (int64t mask)
{
    value ^= mask;
    return *this;
}

////////////////////////////////////////////////////////////////////////////////
// Unary Operators
////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator + () const
{
    tfixed64 out;
    out.value = value;
    return out;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator - () const
{
    tfixed64 out;
    out.value = -value;
    return out;
}

////////////////////////////////////////////////////////////////////////////////
// Binary Operators
////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator + (const tfixed64 & fx_val) const
{
    tfixed64 out;
    out.value = value + fx_val.value;
    return out;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator - (const tfixed64 & fx_val) const
{
    tfixed64 out;
    out.value = value - fx_val.value;
    return out;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator * (const tfixed64 & fx_val) const
{
    tfixed64 out;
    out.value = ((value * fx_val.value + half) >> bits);
    return out;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator / (const tfixed64 & fx_val) const
{
    tfixed64 out;
    out.value = ((value << bits) / fx_val.value);
    return out;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator >> (int64t i) const
{
    tfixed64 out;
    out.value = value >> i;
    return out;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator << (int64t i) const
{
    tfixed64 out;
    out.value = value << i;
    return out;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator & (int64t mask) const
{
    tfixed64 out;
    out.value = value & mask;
    return out;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator | (int64t mask) const
{
    tfixed64 out;
    out.value = value | mask;
    return out;
}

////////////////////////////////////////////////////////////////////////////////
tfixed64 tfixed64::operator ^ (int64t mask) const
{
    tfixed64 out;
    out.value = value ^ mask;
    return out;
}

////////////////////////////////////////////////////////////////////////////////
bool tfixed64::operator == (const tfixed64 & fx_val) const
{
    return value == fx_val.value;
}

////////////////////////////////////////////////////////////////////////////////
bool tfixed64::operator != (const tfixed64 & fx_val) const
{
    return value != fx_val.value;
}

////////////////////////////////////////////////////////////////////////////////
bool tfixed64::operator <  (const tfixed64 & fx_val) const
{
    return value < fx_val.value;
}

////////////////////////////////////////////////////////////////////////////////
bool tfixed64::operator >  (const tfixed64 & fx_val) const
{
    return value > fx_val.value;
}

////////////////////////////////////////////////////////////////////////////////
bool tfixed64::operator <= (const tfixed64 & fx_val) const
{
    return value <= fx_val.value;

}

////////////////////////////////////////////////////////////////////////////////
bool tfixed64::operator >= (const tfixed64 & fx_val) const
{
    return value >= fx_val.value;
}

////////////////////////////////////////////////////////////////////////////////
bool tfixed64::operator && (const tfixed64 & fx_val) const
{
    return value && fx_val.value;
}

////////////////////////////////////////////////////////////////////////////////
bool tfixed64::operator || (const tfixed64 & fx_val) const
{
    return value || fx_val.value;
}
////////////////////////////////////////////////////////////////////////////////
