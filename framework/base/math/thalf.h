///////////////////////////////////////////////////////////////////////////////
//  thalf.h
//
//  Half precision floating point class declaration.
//  Conversion and utils functions declalaration available.
//
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __HALF_H__
#define __HALF_H__

#include "platform.h"

///////////////////////////////////////////////////////////////////////////////
// Math 16-bit half precision floating point type class
class thalf
{
protected:
    uint16t value;

public:
    // Constructors declarations
    thalf();
    thalf(const thalf & half_val);
    thalf(float f_val);
    thalf(double d_val);
    thalf(int32t i_val);
    thalf(int16t i_val);

    // Cast to pointer uint16t *
    operator uint16t * () const;
    operator const uint16t * () const;

    // Cast to promitive built-in types
    operator float() const;
    operator double() const;
    operator int32t() const;
    operator int16t() const;
    operator bool() const;

    // Assignment operators
    thalf & operator =  (const thalf & half_val);
    thalf & operator += (const thalf & half_val);
    thalf & operator -= (const thalf & half_val);
    thalf & operator *= (const thalf & half_val);
    thalf & operator /= (const thalf & half_val);

    // Unary operators
    thalf operator + () const;
    thalf operator - () const;

    // Binary operators
    thalf operator + (const thalf & half_val) const;
    thalf operator - (const thalf & half_val) const;
    thalf operator * (const thalf & half_val) const;
    thalf operator / (const thalf & half_val) const;

    bool operator == (const thalf & half_val) const;
    bool operator != (const thalf & half_val) const;

    bool operator <  (const thalf & half_val) const;
    bool operator >  (const thalf & half_val) const;

    bool operator <= (const thalf & half_val) const;
    bool operator >= (const thalf & half_val) const;
};
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Conversion functions
thalf mftoh(float f_val);
///////////////////////////////////////////////////////////////////////////////
float mhtof(const thalf & h_val);
///////////////////////////////////////////////////////////////////////////////
uint16t mftoh_raw(float f_val);
///////////////////////////////////////////////////////////////////////////////
float  mhtof_raw(uint16t h_val);

// TAG_HALF_CONVERTION
///////////////////////////////////////////////////////////////////////////////
// Converting float type to half type functions
uint16t m_float_to_half_ilm(float f);
///////////////////////////////////////////////////////////////////////////////
uint16t m_float_to_half_amd(float f);

///////////////////////////////////////////////////////////////////////////////
// Converting half type to float type functions
float m_half_to_float_ilm(uint16t val);
///////////////////////////////////////////////////////////////////////////////
float m_half_to_float_amd(uint16t val);
///////////////////////////////////////////////////////////////////////////////
float m_half_to_float_table(uint16t val);
// TAG_HALF_CONVERTION



///////////////////////////////////////////////////////////////////////////////
// Making half number
thalf mmakeh(int32t sign, int32t exponent, int32t mantissa);
///////////////////////////////////////////////////////////////////////////////
// Splitting half number
void  msplith(const thalf & h_val, int32t & sign, int32t & exp, int32t & mant);
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Testing half value functions
///////////////////////////////////////////////////////////////////////////////
bool misnan(thalf & h_val);
///////////////////////////////////////////////////////////////////////////////
bool mqnan(thalf & h_val);
///////////////////////////////////////////////////////////////////////////////
bool msnan(thalf & h_val);
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Is infinity
bool misinf(thalf & h_val);
///////////////////////////////////////////////////////////////////////////////
// Is positive infinity
bool mpinf(thalf & h_val);
///////////////////////////////////////////////////////////////////////////////
// Is negative infinity
bool mninf(thalf & h_val);
///////////////////////////////////////////////////////////////////////////////


#endif //__HALF_H__
